/*
 * This file is generated by jOOQ.
 */
package Backend.JBProjekt.Generated.jbprojekt;


import Backend.JBProjekt.Generated.jbprojekt.tables.CategoryTree;
import Backend.JBProjekt.Generated.jbprojekt.tables.Inventory;
import Backend.JBProjekt.Generated.jbprojekt.tables.InventoryItem;
import Backend.JBProjekt.Generated.jbprojekt.tables.InventoryManagement;
import Backend.JBProjekt.Generated.jbprojekt.tables.ItemCategory;
import Backend.JBProjekt.Generated.jbprojekt.tables.ItemCategoryItemDescriptor;
import Backend.JBProjekt.Generated.jbprojekt.tables.ItemDescriptor;
import Backend.JBProjekt.Generated.jbprojekt.tables.UnitConverter;
import Backend.JBProjekt.Generated.jbprojekt.tables.User;
import Backend.JBProjekt.Generated.jbprojekt.tables.Waste;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.CategoryTreeRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.InventoryItemRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.InventoryManagementRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.InventoryRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.ItemCategoryItemDescriptorRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.ItemCategoryRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.ItemDescriptorRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.UnitConverterRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.UserRecord;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.WasteRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>jbprojekt</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<CategoryTreeRecord, Integer> IDENTITY_CATEGORY_TREE = Identities0.IDENTITY_CATEGORY_TREE;
    public static final Identity<InventoryRecord, Integer> IDENTITY_INVENTORY = Identities0.IDENTITY_INVENTORY;
    public static final Identity<InventoryItemRecord, Integer> IDENTITY_INVENTORY_ITEM = Identities0.IDENTITY_INVENTORY_ITEM;
    public static final Identity<ItemCategoryRecord, Integer> IDENTITY_ITEM_CATEGORY = Identities0.IDENTITY_ITEM_CATEGORY;
    public static final Identity<ItemDescriptorRecord, Integer> IDENTITY_ITEM_DESCRIPTOR = Identities0.IDENTITY_ITEM_DESCRIPTOR;
    public static final Identity<UnitConverterRecord, Integer> IDENTITY_UNIT_CONVERTER = Identities0.IDENTITY_UNIT_CONVERTER;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;
    public static final Identity<WasteRecord, Integer> IDENTITY_WASTE = Identities0.IDENTITY_WASTE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoryTreeRecord> KEY_CATEGORY_TREE_PRIMARY = UniqueKeys0.KEY_CATEGORY_TREE_PRIMARY;
    public static final UniqueKey<CategoryTreeRecord> KEY_CATEGORY_TREE_TOP_CATEGORY_ID = UniqueKeys0.KEY_CATEGORY_TREE_TOP_CATEGORY_ID;
    public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = UniqueKeys0.KEY_INVENTORY_PRIMARY;
    public static final UniqueKey<InventoryItemRecord> KEY_INVENTORY_ITEM_PRIMARY = UniqueKeys0.KEY_INVENTORY_ITEM_PRIMARY;
    public static final UniqueKey<InventoryManagementRecord> KEY_INVENTORY_MANAGEMENT_PRIMARY = UniqueKeys0.KEY_INVENTORY_MANAGEMENT_PRIMARY;
    public static final UniqueKey<ItemCategoryRecord> KEY_ITEM_CATEGORY_PRIMARY = UniqueKeys0.KEY_ITEM_CATEGORY_PRIMARY;
    public static final UniqueKey<ItemCategoryItemDescriptorRecord> KEY_ITEM_CATEGORY_ITEM_DESCRIPTOR_PRIMARY = UniqueKeys0.KEY_ITEM_CATEGORY_ITEM_DESCRIPTOR_PRIMARY;
    public static final UniqueKey<ItemDescriptorRecord> KEY_ITEM_DESCRIPTOR_PRIMARY = UniqueKeys0.KEY_ITEM_DESCRIPTOR_PRIMARY;
    public static final UniqueKey<ItemDescriptorRecord> KEY_ITEM_DESCRIPTOR_PRODUCT_ID = UniqueKeys0.KEY_ITEM_DESCRIPTOR_PRODUCT_ID;
    public static final UniqueKey<ItemDescriptorRecord> KEY_ITEM_DESCRIPTOR_UNIT_CONVERTER_ID = UniqueKeys0.KEY_ITEM_DESCRIPTOR_UNIT_CONVERTER_ID;
    public static final UniqueKey<UnitConverterRecord> KEY_UNIT_CONVERTER_PRIMARY = UniqueKeys0.KEY_UNIT_CONVERTER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<WasteRecord> KEY_WASTE_PRIMARY = UniqueKeys0.KEY_WASTE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CategoryTreeRecord, ItemCategoryRecord> FK_CATEGORY_TREE_ITEM_CATEGORY = ForeignKeys0.FK_CATEGORY_TREE_ITEM_CATEGORY;
    public static final ForeignKey<InventoryItemRecord, ItemDescriptorRecord> FK_ITEMINVENTORYITEM = ForeignKeys0.FK_ITEMINVENTORYITEM;
    public static final ForeignKey<InventoryItemRecord, InventoryRecord> FK_INVENTORY = ForeignKeys0.FK_INVENTORY;
    public static final ForeignKey<InventoryManagementRecord, InventoryRecord> FK_EXPECTED_INVENTORY_ID = ForeignKeys0.FK_EXPECTED_INVENTORY_ID;
    public static final ForeignKey<InventoryManagementRecord, InventoryRecord> FK_COMPLETED_INVENTORY_ID = ForeignKeys0.FK_COMPLETED_INVENTORY_ID;
    public static final ForeignKey<ItemCategoryRecord, ItemCategoryRecord> FK_CATEGORY_CATEGORY = ForeignKeys0.FK_CATEGORY_CATEGORY;
    public static final ForeignKey<ItemCategoryItemDescriptorRecord, ItemCategoryRecord> FK_ITEM_CATEGORY_ITEM_DESCRIPTOR_ITEM_CATEGORY = ForeignKeys0.FK_ITEM_CATEGORY_ITEM_DESCRIPTOR_ITEM_CATEGORY;
    public static final ForeignKey<ItemCategoryItemDescriptorRecord, ItemDescriptorRecord> FK_ITEM_CATEGORY_ITEM_DESCRIPTOR_ITEM_DESCRIPTOR = ForeignKeys0.FK_ITEM_CATEGORY_ITEM_DESCRIPTOR_ITEM_DESCRIPTOR;
    public static final ForeignKey<ItemDescriptorRecord, UnitConverterRecord> FK_ITEMDESCRIPTORUNITCONVERTER = ForeignKeys0.FK_ITEMDESCRIPTORUNITCONVERTER;
    public static final ForeignKey<WasteRecord, ItemDescriptorRecord> FK_ITEMWASTE = ForeignKeys0.FK_ITEMWASTE;
    public static final ForeignKey<WasteRecord, UserRecord> FK_USER = ForeignKeys0.FK_USER;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<CategoryTreeRecord, Integer> IDENTITY_CATEGORY_TREE = Internal.createIdentity(CategoryTree.CATEGORY_TREE, CategoryTree.CATEGORY_TREE.ID);
        public static Identity<InventoryRecord, Integer> IDENTITY_INVENTORY = Internal.createIdentity(Inventory.INVENTORY, Inventory.INVENTORY.ID);
        public static Identity<InventoryItemRecord, Integer> IDENTITY_INVENTORY_ITEM = Internal.createIdentity(InventoryItem.INVENTORY_ITEM, InventoryItem.INVENTORY_ITEM.ID);
        public static Identity<ItemCategoryRecord, Integer> IDENTITY_ITEM_CATEGORY = Internal.createIdentity(ItemCategory.ITEM_CATEGORY, ItemCategory.ITEM_CATEGORY.ID);
        public static Identity<ItemDescriptorRecord, Integer> IDENTITY_ITEM_DESCRIPTOR = Internal.createIdentity(ItemDescriptor.ITEM_DESCRIPTOR, ItemDescriptor.ITEM_DESCRIPTOR.ID);
        public static Identity<UnitConverterRecord, Integer> IDENTITY_UNIT_CONVERTER = Internal.createIdentity(UnitConverter.UNIT_CONVERTER, UnitConverter.UNIT_CONVERTER.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
        public static Identity<WasteRecord, Integer> IDENTITY_WASTE = Internal.createIdentity(Waste.WASTE, Waste.WASTE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<CategoryTreeRecord> KEY_CATEGORY_TREE_PRIMARY = Internal.createUniqueKey(CategoryTree.CATEGORY_TREE, "KEY_category_tree_PRIMARY", CategoryTree.CATEGORY_TREE.ID);
        public static final UniqueKey<CategoryTreeRecord> KEY_CATEGORY_TREE_TOP_CATEGORY_ID = Internal.createUniqueKey(CategoryTree.CATEGORY_TREE, "KEY_category_tree_top_category_id", CategoryTree.CATEGORY_TREE.TOP_CATEGORY_ID);
        public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = Internal.createUniqueKey(Inventory.INVENTORY, "KEY_inventory_PRIMARY", Inventory.INVENTORY.ID);
        public static final UniqueKey<InventoryItemRecord> KEY_INVENTORY_ITEM_PRIMARY = Internal.createUniqueKey(InventoryItem.INVENTORY_ITEM, "KEY_inventory_item_PRIMARY", InventoryItem.INVENTORY_ITEM.ID);
        public static final UniqueKey<InventoryManagementRecord> KEY_INVENTORY_MANAGEMENT_PRIMARY = Internal.createUniqueKey(InventoryManagement.INVENTORY_MANAGEMENT, "KEY_inventory_management_PRIMARY", InventoryManagement.INVENTORY_MANAGEMENT.PRIMARY_KEY);
        public static final UniqueKey<ItemCategoryRecord> KEY_ITEM_CATEGORY_PRIMARY = Internal.createUniqueKey(ItemCategory.ITEM_CATEGORY, "KEY_item_category_PRIMARY", ItemCategory.ITEM_CATEGORY.ID);
        public static final UniqueKey<ItemCategoryItemDescriptorRecord> KEY_ITEM_CATEGORY_ITEM_DESCRIPTOR_PRIMARY = Internal.createUniqueKey(ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR, "KEY_item_category_item_descriptor_PRIMARY", ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR.ITEM_DESCRIPTOR_ID, ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR.ITEM_CATEGORY_ID);
        public static final UniqueKey<ItemDescriptorRecord> KEY_ITEM_DESCRIPTOR_PRIMARY = Internal.createUniqueKey(ItemDescriptor.ITEM_DESCRIPTOR, "KEY_item_descriptor_PRIMARY", ItemDescriptor.ITEM_DESCRIPTOR.ID);
        public static final UniqueKey<ItemDescriptorRecord> KEY_ITEM_DESCRIPTOR_PRODUCT_ID = Internal.createUniqueKey(ItemDescriptor.ITEM_DESCRIPTOR, "KEY_item_descriptor_product_id", ItemDescriptor.ITEM_DESCRIPTOR.PRODUCT_ID);
        public static final UniqueKey<ItemDescriptorRecord> KEY_ITEM_DESCRIPTOR_UNIT_CONVERTER_ID = Internal.createUniqueKey(ItemDescriptor.ITEM_DESCRIPTOR, "KEY_item_descriptor_unit_converter_id", ItemDescriptor.ITEM_DESCRIPTOR.UNIT_CONVERTER_ID);
        public static final UniqueKey<UnitConverterRecord> KEY_UNIT_CONVERTER_PRIMARY = Internal.createUniqueKey(UnitConverter.UNIT_CONVERTER, "KEY_unit_converter_PRIMARY", UnitConverter.UNIT_CONVERTER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<WasteRecord> KEY_WASTE_PRIMARY = Internal.createUniqueKey(Waste.WASTE, "KEY_waste_PRIMARY", Waste.WASTE.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<CategoryTreeRecord, ItemCategoryRecord> FK_CATEGORY_TREE_ITEM_CATEGORY = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_ITEM_CATEGORY_PRIMARY, CategoryTree.CATEGORY_TREE, "FK_category_tree_item_category", CategoryTree.CATEGORY_TREE.TOP_CATEGORY_ID);
        public static final ForeignKey<InventoryItemRecord, ItemDescriptorRecord> FK_ITEMINVENTORYITEM = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_ITEM_DESCRIPTOR_PRIMARY, InventoryItem.INVENTORY_ITEM, "FK_ItemInventoryItem", InventoryItem.INVENTORY_ITEM.ITEM_DESCRIPTOR_ID);
        public static final ForeignKey<InventoryItemRecord, InventoryRecord> FK_INVENTORY = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_INVENTORY_PRIMARY, InventoryItem.INVENTORY_ITEM, "FK_Inventory", InventoryItem.INVENTORY_ITEM.INVENTORY_ID);
        public static final ForeignKey<InventoryManagementRecord, InventoryRecord> FK_EXPECTED_INVENTORY_ID = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_INVENTORY_PRIMARY, InventoryManagement.INVENTORY_MANAGEMENT, "FK_expected_inventory_id", InventoryManagement.INVENTORY_MANAGEMENT.EXPECTED_INVENTORY_ID);
        public static final ForeignKey<InventoryManagementRecord, InventoryRecord> FK_COMPLETED_INVENTORY_ID = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_INVENTORY_PRIMARY, InventoryManagement.INVENTORY_MANAGEMENT, "FK_completed_inventory_id", InventoryManagement.INVENTORY_MANAGEMENT.CURRENT_INVENTORY_ID);
        public static final ForeignKey<ItemCategoryRecord, ItemCategoryRecord> FK_CATEGORY_CATEGORY = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_ITEM_CATEGORY_PRIMARY, ItemCategory.ITEM_CATEGORY, "FK_category_category", ItemCategory.ITEM_CATEGORY.PARENT_ID);
        public static final ForeignKey<ItemCategoryItemDescriptorRecord, ItemCategoryRecord> FK_ITEM_CATEGORY_ITEM_DESCRIPTOR_ITEM_CATEGORY = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_ITEM_CATEGORY_PRIMARY, ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR, "FK_item_category_item_descriptor_item_category", ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR.ITEM_CATEGORY_ID);
        public static final ForeignKey<ItemCategoryItemDescriptorRecord, ItemDescriptorRecord> FK_ITEM_CATEGORY_ITEM_DESCRIPTOR_ITEM_DESCRIPTOR = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_ITEM_DESCRIPTOR_PRIMARY, ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR, "FK_item_category_item_descriptor_item_descriptor", ItemCategoryItemDescriptor.ITEM_CATEGORY_ITEM_DESCRIPTOR.ITEM_DESCRIPTOR_ID);
        public static final ForeignKey<ItemDescriptorRecord, UnitConverterRecord> FK_ITEMDESCRIPTORUNITCONVERTER = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_UNIT_CONVERTER_PRIMARY, ItemDescriptor.ITEM_DESCRIPTOR, "FK_ItemDescriptorUnitConverter", ItemDescriptor.ITEM_DESCRIPTOR.UNIT_CONVERTER_ID);
        public static final ForeignKey<WasteRecord, ItemDescriptorRecord> FK_ITEMWASTE = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_ITEM_DESCRIPTOR_PRIMARY, Waste.WASTE, "FK_ItemWaste", Waste.WASTE.ITEM_DESCRIPTOR_ID);
        public static final ForeignKey<WasteRecord, UserRecord> FK_USER = Internal.createForeignKey(Backend.JBProjekt.Generated.jbprojekt.Keys.KEY_USER_PRIMARY, Waste.WASTE, "FK_User", Waste.WASTE.USER_ID);
    }
}
