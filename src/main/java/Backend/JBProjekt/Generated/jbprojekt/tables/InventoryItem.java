/*
 * This file is generated by jOOQ.
 */
package Backend.JBProjekt.Generated.jbprojekt.tables;


import Backend.JBProjekt.Generated.jbprojekt.Indexes;
import Backend.JBProjekt.Generated.jbprojekt.Jbprojekt;
import Backend.JBProjekt.Generated.jbprojekt.Keys;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.InventoryItemRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InventoryItem extends TableImpl<InventoryItemRecord> {

    private static final long serialVersionUID = 1771122030;

    /**
     * The reference instance of <code>jbprojekt.inventory_item</code>
     */
    public static final InventoryItem INVENTORY_ITEM = new InventoryItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InventoryItemRecord> getRecordType() {
        return InventoryItemRecord.class;
    }

    /**
     * The column <code>jbprojekt.inventory_item.id</code>.
     */
    public final TableField<InventoryItemRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jbprojekt.inventory_item.sort_order</code>.
     */
    public final TableField<InventoryItemRecord, Integer> SORT_ORDER = createField("sort_order", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jbprojekt.inventory_item.item_descriptor_id</code>.
     */
    public final TableField<InventoryItemRecord, Integer> ITEM_DESCRIPTOR_ID = createField("item_descriptor_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jbprojekt.inventory_item.quantity</code>.
     */
    public final TableField<InventoryItemRecord, BigDecimal> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.DECIMAL(11, 2), this, "");

    /**
     * The column <code>jbprojekt.inventory_item.inventory_id</code>.
     */
    public final TableField<InventoryItemRecord, Integer> INVENTORY_ID = createField("inventory_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jbprojekt.inventory_item.exported</code>.
     */
    public final TableField<InventoryItemRecord, Byte> EXPORTED = createField("exported", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>jbprojekt.inventory_item</code> table reference
     */
    public InventoryItem() {
        this(DSL.name("inventory_item"), null);
    }

    /**
     * Create an aliased <code>jbprojekt.inventory_item</code> table reference
     */
    public InventoryItem(String alias) {
        this(DSL.name(alias), INVENTORY_ITEM);
    }

    /**
     * Create an aliased <code>jbprojekt.inventory_item</code> table reference
     */
    public InventoryItem(Name alias) {
        this(alias, INVENTORY_ITEM);
    }

    private InventoryItem(Name alias, Table<InventoryItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private InventoryItem(Name alias, Table<InventoryItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InventoryItem(Table<O> child, ForeignKey<O, InventoryItemRecord> key) {
        super(child, key, INVENTORY_ITEM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jbprojekt.JBPROJEKT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVENTORY_ITEM_FK_INVENTORY, Indexes.INVENTORY_ITEM_FK_ITEMINVENTORYITEM, Indexes.INVENTORY_ITEM_PRIMARY, Indexes.INVENTORY_ITEM_SORT_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InventoryItemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INVENTORY_ITEM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InventoryItemRecord> getPrimaryKey() {
        return Keys.KEY_INVENTORY_ITEM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InventoryItemRecord>> getKeys() {
        return Arrays.<UniqueKey<InventoryItemRecord>>asList(Keys.KEY_INVENTORY_ITEM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InventoryItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InventoryItemRecord, ?>>asList(Keys.FK_ITEMINVENTORYITEM, Keys.FK_INVENTORY);
    }

    public ItemDescriptor itemDescriptor() {
        return new ItemDescriptor(this, Keys.FK_ITEMINVENTORYITEM);
    }

    public Inventory inventory() {
        return new Inventory(this, Keys.FK_INVENTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryItem as(String alias) {
        return new InventoryItem(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InventoryItem as(Name alias) {
        return new InventoryItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InventoryItem rename(String name) {
        return new InventoryItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InventoryItem rename(Name name) {
        return new InventoryItem(name, null);
    }
}
