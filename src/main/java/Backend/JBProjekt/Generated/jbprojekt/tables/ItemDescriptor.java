/*
 * This file is generated by jOOQ.
 */
package Backend.JBProjekt.Generated.jbprojekt.tables;


import Backend.JBProjekt.Generated.jbprojekt.Indexes;
import Backend.JBProjekt.Generated.jbprojekt.Jbprojekt;
import Backend.JBProjekt.Generated.jbprojekt.Keys;
import Backend.JBProjekt.Generated.jbprojekt.tables.records.ItemDescriptorRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemDescriptor extends TableImpl<ItemDescriptorRecord> {

    private static final long serialVersionUID = 1776260555;

    /**
     * The reference instance of <code>jbprojekt.item_descriptor</code>
     */
    public static final ItemDescriptor ITEM_DESCRIPTOR = new ItemDescriptor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemDescriptorRecord> getRecordType() {
        return ItemDescriptorRecord.class;
    }

    /**
     * The column <code>jbprojekt.item_descriptor.id</code>.
     */
    public final TableField<ItemDescriptorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jbprojekt.item_descriptor.name</code>.
     */
    public final TableField<ItemDescriptorRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jbprojekt.item_descriptor.product_id</code>.
     */
    public final TableField<ItemDescriptorRecord, String> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jbprojekt.item_descriptor.navdescription</code>.
     */
    public final TableField<ItemDescriptorRecord, String> NAVDESCRIPTION = createField("navdescription", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jbprojekt.item_descriptor.unit_cost</code>.
     */
    public final TableField<ItemDescriptorRecord, BigDecimal> UNIT_COST = createField("unit_cost", org.jooq.impl.SQLDataType.DECIMAL(11, 2), this, "");

    /**
     * The column <code>jbprojekt.item_descriptor.state_id</code>.
     */
    public final TableField<ItemDescriptorRecord, Integer> STATE_ID = createField("state_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jbprojekt.item_descriptor.unit_converter_id</code>.
     */
    public final TableField<ItemDescriptorRecord, Integer> UNIT_CONVERTER_ID = createField("unit_converter_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>jbprojekt.item_descriptor</code> table reference
     */
    public ItemDescriptor() {
        this(DSL.name("item_descriptor"), null);
    }

    /**
     * Create an aliased <code>jbprojekt.item_descriptor</code> table reference
     */
    public ItemDescriptor(String alias) {
        this(DSL.name(alias), ITEM_DESCRIPTOR);
    }

    /**
     * Create an aliased <code>jbprojekt.item_descriptor</code> table reference
     */
    public ItemDescriptor(Name alias) {
        this(alias, ITEM_DESCRIPTOR);
    }

    private ItemDescriptor(Name alias, Table<ItemDescriptorRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemDescriptor(Name alias, Table<ItemDescriptorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ItemDescriptor(Table<O> child, ForeignKey<O, ItemDescriptorRecord> key) {
        super(child, key, ITEM_DESCRIPTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jbprojekt.JBPROJEKT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEM_DESCRIPTOR_PRIMARY, Indexes.ITEM_DESCRIPTOR_PRODUCT_ID, Indexes.ITEM_DESCRIPTOR_UNIT_CONVERTER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ItemDescriptorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITEM_DESCRIPTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemDescriptorRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_DESCRIPTOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemDescriptorRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemDescriptorRecord>>asList(Keys.KEY_ITEM_DESCRIPTOR_PRIMARY, Keys.KEY_ITEM_DESCRIPTOR_PRODUCT_ID, Keys.KEY_ITEM_DESCRIPTOR_UNIT_CONVERTER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ItemDescriptorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemDescriptorRecord, ?>>asList(Keys.FK_ITEMDESCRIPTORUNITCONVERTER);
    }

    public UnitConverter unitConverter() {
        return new UnitConverter(this, Keys.FK_ITEMDESCRIPTORUNITCONVERTER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDescriptor as(String alias) {
        return new ItemDescriptor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDescriptor as(Name alias) {
        return new ItemDescriptor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemDescriptor rename(String name) {
        return new ItemDescriptor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemDescriptor rename(Name name) {
        return new ItemDescriptor(name, null);
    }
}
