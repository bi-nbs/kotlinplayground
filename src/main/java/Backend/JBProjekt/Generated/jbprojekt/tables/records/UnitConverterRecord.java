/*
 * This file is generated by jOOQ.
 */
package Backend.JBProjekt.Generated.jbprojekt.tables.records;


import Backend.JBProjekt.Generated.jbprojekt.tables.UnitConverter;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnitConverterRecord extends UpdatableRecordImpl<UnitConverterRecord> implements Record5<Integer, Double, Double, Double, Double> {

    private static final long serialVersionUID = -1181478815;

    /**
     * Setter for <code>jbprojekt.unit_converter.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>jbprojekt.unit_converter.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jbprojekt.unit_converter.gram</code>.
     */
    public void setGram(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>jbprojekt.unit_converter.gram</code>.
     */
    public Double getGram() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>jbprojekt.unit_converter.pieces</code>.
     */
    public void setPieces(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>jbprojekt.unit_converter.pieces</code>.
     */
    public Double getPieces() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>jbprojekt.unit_converter.liter</code>.
     */
    public void setLiter(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>jbprojekt.unit_converter.liter</code>.
     */
    public Double getLiter() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>jbprojekt.unit_converter.base_unit</code>.
     */
    public void setBaseUnit(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>jbprojekt.unit_converter.base_unit</code>.
     */
    public Double getBaseUnit() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, Double, Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, Double, Double, Double, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return UnitConverter.UNIT_CONVERTER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field2() {
        return UnitConverter.UNIT_CONVERTER.GRAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field3() {
        return UnitConverter.UNIT_CONVERTER.PIECES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return UnitConverter.UNIT_CONVERTER.LITER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return UnitConverter.UNIT_CONVERTER.BASE_UNIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component2() {
        return getGram();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component3() {
        return getPieces();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component4() {
        return getLiter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component5() {
        return getBaseUnit();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value2() {
        return getGram();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value3() {
        return getPieces();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getLiter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getBaseUnit();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UnitConverterRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UnitConverterRecord value2(Double value) {
        setGram(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UnitConverterRecord value3(Double value) {
        setPieces(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UnitConverterRecord value4(Double value) {
        setLiter(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UnitConverterRecord value5(Double value) {
        setBaseUnit(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UnitConverterRecord values(Integer value1, Double value2, Double value3, Double value4, Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UnitConverterRecord
     */
    public UnitConverterRecord() {
        super(UnitConverter.UNIT_CONVERTER);
    }

    /**
     * Create a detached, initialised UnitConverterRecord
     */
    public UnitConverterRecord(Integer id, Double gram, Double pieces, Double liter, Double baseUnit) {
        super(UnitConverter.UNIT_CONVERTER);

        set(0, id);
        set(1, gram);
        set(2, pieces);
        set(3, liter);
        set(4, baseUnit);
    }
}
